# Application Configuration
app:
  name: "ProjectBaseName - API"
  description: "ProjectBaseName - Base API"
  version:
    number: 2.0.0
    update-required: false

  # Virtual Threads (Java 21)
  threads:
    virtual:
      enabled: true

  # File Upload Configuration
  servlet:
    multipart:
      max-file-size: 20MB
      max-request-size: 40MB

  # Database Configuration
  datasource:
    hikari:
      maximum-pool-size: 20
      connection-timeout: 60000
      register-mbeans: true
      leak-detection-threshold: 30000

  # JPA/Hibernate Configuration
  jpa:
    show-sql: false
    hibernate:
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    properties:
      hibernate:
        format_sql: false
        jdbc:
          time_zone: UTC

  # Email Configuration (Microsoft 365)
  mail:
    host: smtp.office365.com
    port: 587
    username: no-reply@projectbasename.com
    password: ....
    from: no-reply@projectbasename.com
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            enable: false
            protocols: TLSv1.2

  # Thymeleaf (substituindo Freemarker)
  thymeleaf:
    charset: UTF-8
    cache: false
    prefix: classpath:/templates/
    suffix: .html

# API Configuration
api:
  server:
    url: ${API_SERVER_URL:http://localhost:8080}

# Password Reset Configuration
password-reset:
  token:
    expiration-hours: 1
  cooldown-minutes: 5

# External APIs Configuration
external-apis:
  brasil-api:
    base-url: https://brasilapi.com.br/api

  receita-ws-api:
    base-url: https://receitaws.com.br

  via-cep-api:
    base-url: https://viacep.com.br/ws

# Google API Configuration
google:
  api:
    key: <GOOGLE_API_KEY>
  oauth:
    client-id: ${GOOGLE_OAUTH_CLIENT_ID}
    client-secret: ${GOOGLE_OAUTH_CLIENT_SECRET}

# Twilio Configuration
twilio:
  account:
    sid: <TWILIO_ACCOUNT_SID>
  auth:
    token: <TWILIO_AUTH_TOKEN>
  phone:
    number: whatsapp:+<TWILIO_PHONE_NUMBER>
  sms:
    phone:
      number: +<TWILIO_SMS_PHONE_NUMBER>
  webhook:
    enabled: true



# RevenueCat Configuration
revenuecat:
  api:
    signature-key: <REVENUECAT_SIGNATURE_KEY>
    public-key: <REVENUECAT_PUBLIC_KEY>
    webhook-url: <REVENUECAT_WEBHOOK_URL>
    environment: sandbox

# Configuração geral de pagamentos
payment:
  is-production-environment: false
  provider-activated: REVENUECAT
  default-currency: BRL
  webhook-retries: 3
  webhook-timeout-seconds: 30

# Firebase Configuration
firebase:
  service-account: classpath:<FIREBASE_SERVICE_ACCOUNT_FILE>.json

# AWS Configuration
aws:
  region: us-east-1
  credentials:
    access-key: <AWS_ACCESS_KEY>
    secret-key: <AWS_SECRET_KEY>

# SQS Queue Configuration
queue:
  payment-webhook:
    concurrency: 3
    name: <SQS_QUEUE_NAME>.fifo
    url: https://sqs.us-east-1.amazonaws.com/<AWS_ACCOUNT_ID>/<SQS_QUEUE_NAME>.fifo

# JWT Configuration
jwt:
  secret: <JWT_SECRET>
  # 24h para mobile
  expiration: 86400000
  # 30 dias
  refresh-expiration: 2592000000
  access-token-expiration-seconds: 86400
  temp-token-expiration-seconds: 86400000

# Auth Configuration
auth:
  login:
    max-attempts: 5
    lockout-minutes: 5
  rate-limit:
    tokens-per-minute: 60

# Verification Settings
verification:
  sms:
    expiration-minutes: 5
    max-attempts: 3
    cooldown-seconds: 60
  email:
    expiration-minutes: 10
    max-attempts: 5
  temp-token:
    expiration-minutes: 10

# ===========================
# SPRING BOOT CONFIGURATION
# ===========================
spring:
  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5435/projectbasename
    username: <DB_USERNAME>
    password: <DB_PASSWORD>
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      connection-timeout: 60000
      register-mbeans: true
      leak-detection-threshold: 30000

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate  # IMPORTANTE: validate para usar Flyway
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        jdbc:
          time_zone: UTC
        naming:
          physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy

  # FLYWAY CONFIGURATION
  flyway:
    enabled: true
    baseline-on-migrate: true
    baseline-version: 0
    baseline-description: "Initial baseline"
    locations: classpath:db/migration
    validate-on-migrate: true
    schemas: public
    sql-migration-prefix: V
    sql-migration-separator: __
    sql-migration-suffixes: .sql
    out-of-order: false
    encoding: UTF-8

# Microsoft OAuth2 Configuration
microsoft:
  oauth:
    client-id: <MICROSOFT_OAUTH_CLIENT_ID>
    client-secret: <MICROSOFT_OAUTH_CLIENT_SECRET>
    tenant: <MICROSOFT_OAUTH_TENANT>

# Logging Configuration
logging:
  level:
    com.projectbasename: INFO
    com.zaxxer.hikari: OFF
    org.springframework.web: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    # Para debug do Flyway (temporário)
    org.flywaydb: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,flyway
  endpoint:
    health:
      show-details: when-authorized

# SpringDoc OpenAPI Configuration
springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operations-sorter: method
    tags-sorter: alpha
    try-it-out-enabled: true
    filter: true
  packages-to-scan: com.projectbasename.infrastructure.controller
  paths-to-match: /v1/**, /twilio-webhooks/**
