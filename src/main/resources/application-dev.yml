# Development Environment Configuration

# API Configuration
api:
  server:
    url: http://localhost:8081/
  token-expiration-hours: 2160

  # File Storage Paths
  task:
    files:
      prefix: files/task
      directory: /home/edu/PROJECTBASENAME/files/files/task

  cost:
    files:
      prefix: files/cost
      directory: /home/edu/PROJECTBASENAME/files/files/cost

# Server Configuration
server:
  port: 8081

spring:
  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5435/projectbasename
    username: projectbasename
    password: projectbasename2025
    driver-class-name: org.postgresql.Driver

  # Flyway Configuration
  flyway:
    enabled: true
    baseline-on-migrate: true
    baseline-version: 0
    locations: classpath:db/migration
    validate-on-migrate: true
    # SEGURANÇA: desabilita comando clean em produção
    clean-disabled: true
    schemas: public
    # Para ambiente de desenvolvimento
    out-of-order: false
    # Configurações específicas para PostgreSQL
    url: jdbc:postgresql://localhost:5435/projectbasename
    user: projectbasename
    password: projectbasename2025
    sql-migration-prefix: V
    sql-migration-separator: __
    sql-migration-suffixes: .sql

  # JPA/Hibernate Configuration (Development)
  jpa:
    show-sql: true
    properties:
      hibernate:
        ddl-auto: validate
        format_sql: true
        naming:
          physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        jdbc:
          time_zone: UTC

  # Redis Configuration
  data:
    redis:
      host: localhost
      port: 6380
      password: projectbasename2025
      database: 0
      timeout: 10000ms
      jedis:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms

  # Email Configuration
  mail:
    host: smtp.office365.com
    port: 587
    username: no-reply@projectbasename.com
    password: <SMTP_PASSWORD>
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            enable: false
            protocols: TLSv1.2
    from: no-reply@projectbasename.com

  cloud:
    aws:
      sqs:
        enabled: false
      sns:
        enabled: false

# Auth Configuration
auth:
  login:
    max-attempts: 30
    lockout-minutes: 1
  rate-limit:
    tokens-per-minute: 60


# JWT Configuration
jwt:
  secret: <JWT_SECRET>
  expiration: 86400000
  refresh-expiration: 2592000000
  access-token-expiration-seconds: 86400

# Twilio Configuration
twilio:
  account:
    sid: <TWILIO_ACCOUNT_SID>
  auth:
    token: <TWILIO_AUTH_TOKEN>
  phone:
    number: whatsapp:+<TWILIO_PHONE_NUMBER>
  sms:
    phone:
      number: +<TWILIO_SMS_PHONE_NUMBER>
  webhook:
    enabled: false

# Google API Configuration
google:
  api:
    key: <GOOGLE_API_KEY>
  oauth:
    client-id: <GOOGLE_OAUTH_CLIENT_ID>
    client-secret: <GOOGLE_OAUTH_CLIENT_SECRET>

# Apple OAuth2 Configuration
apple:
  oauth:
    client-id: <APPLE_OAUTH_CLIENT_ID>
    client-secret: <APPLE_OAUTH_CLIENT_SECRET>
    key-id: <APPLE_KEY_ID>
    team-id: <APPLE_TEAM_ID>

# Microsoft OAuth2 Configuration
microsoft:
  oauth:
    client-id: <MICROSOFT_OAUTH_CLIENT_ID>
    client-secret: <MICROSOFT_OAUTH_CLIENT_SECRET>
    tenant: <MICROSOFT_OAUTH_TENANT>



# RevenueCat Configuration
revenuecat:
  api:
    signature-key: <REVENUECAT_SIGNATURE_KEY>
    public-key: <REVENUECAT_PUBLIC_KEY>
    webhook-url: <REVENUECAT_WEBHOOK_URL>
    environment: sandbox

# Firebase Configuration
firebase:
  service-account: classpath:firebase-service-account.json

# SQS Queue Configuration (Development)
queue:
  payment-webhook:
    concurrency: 1  # Menos concorrência em desenvolvimento
    name: <SQS_QUEUE_NAME>.fifo
    url: https://sqs.us-east-1.amazonaws.com/<AWS_ACCOUNT_ID>/<SQS_QUEUE_NAME>.fifo
    # Configurações específicas para desenvolvimento
    retry-delay-seconds: 30
    max-retries: 3
    dead-letter-queue: <SQS_QUEUE_NAME>-dlq.fifo

# Storage Configuration
storage:
  type: s3
  s3:
    bucket: <S3_BUCKET_NAME>
    region: us-east-1
    access-key-id: <AWS_ACCESS_KEY>
    secret-access-key: <AWS_SECRET_KEY>

# Payment Configuration
payment:
  is-production-environment: false
  provider-activated: REVENUECAT
  default-currency: BRL
  webhook-retries: 3
  webhook-timeout-seconds: 30

# External Services
projectbasename:
  invite:
    base-url: https://invite.homolog.<PROJECT_BASE_NAME>.com/

# SMS Verification Configuration
verification:
  sms:
    expiration-minutes: 5
    max-attempts: 3
    cooldown-seconds: 60
    dev-mode: true
  email:
    expiration-minutes: 30
    max-attempts: 5

# Logging Configuration (Development)
logging:
  level:
    com.projectbasename: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG
    # SpringDoc logging
    org.springdoc: DEBUG
    io.swagger: DEBUG
    # Para identificar problemas de serialização
    com.fasterxml.jackson: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# SpringDoc OpenAPI Configuration (Development)
springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operations-sorter: method
    tags-sorter: alpha
    try-it-out-enabled: true
    filter: true
    # Configuração para melhor debug
    doc-expansion: none
    default-model-expand-depth: 3
    default-models-expand-depth: 3
  packages-to-scan: com.projectbasename.infrastructure.controller
  paths-to-match: /v1/**, /twilio-webhooks/**
  # Configurações adicionais para resolver problemas
  model-and-view-allowed: true
  override-with-generic-response: false

